from fastapi import APIRouter, File, UploadFile
import numpy as np
import cv2
import pytesseract
import logging

from app.ocr import processor, parser

router = APIRouter()

@router.post("/ocr/")
async def ocr_endpoint(file: UploadFile = File(...)):
    try:
        # Load uploaded image into OpenCV format
        contents = await file.read()
        npimg = np.frombuffer(contents, np.uint8)
        img = cv2.imdecode(npimg, cv2.IMREAD_COLOR)

        if img is None:
            return {"error": "Failed to load image"}

        processor.save_debug_image(img, "original")

        # Use the full preprocessing pipeline: find, crop, enhance
        processed_img, status = processor.preprocess_for_ocr(img)

        if processed_img is None:
            return {"error": f"Preprocessing failed: {status}"}

        processor.save_debug_image(processed_img, "text_enhanced")

        # Run OCR on enhanced image
        ocr_text = pytesseract.image_to_string(processed_img, lang='hrv')
        print("[OCR RAW TEXT]", repr(ocr_text)) 
        lines = [line.strip() for line in ocr_text.split("\n") if line.strip()]

        # Fallback: try OCR on cropped (non-enhanced) image if result too weak
        if len(lines) < 5:
            logging.info("Fallback: OCR result weak, trying raw cropped image")
            contour = processor.find_receipt_contour(img)
            if contour is not None:
                cropped = processor.crop_by_corners(img, contour)
                ocr_raw = pytesseract.image_to_string(cropped, lang='hrv')
                lines_raw = [line.strip() for line in ocr_raw.split("\\n") if line.strip()]
                if len(lines_raw) > len(lines):
                    lines = lines_raw

        if not lines:
            return {"error": "No text detected in image"}

        # Parse text lines into structured receipt fields
        result = parser.parse_receipt(lines, log_debug=True)

        result["debug_info"] = {
            "raw_lines": lines[:10],
            "line_source": status,
            "line_count": len(lines)
        }

        return result

    except Exception as e:
        logging.error(f"OCR processing failed: {e}")
        return {"error": f"Processing failed: {str(e)}"}