import re
from datetime import datetime

def parse_receipt(lines, log_debug=False):
    def dbg(msg):
        if log_debug:
            print("[DEBUG]", msg)

    store_name = "Unknown"
    location_label = None
    date, time = None, None
    total = None
    items = []

    ocr_fixes = {
        'ukupko': 'ukupno',
        'ukupko (eur);': 'ukupno',
        'ukupko (eur)': 'ukupno',
        'ukupko:': 'ukupno',
        'suma': 'ukupno',
        'totai': 'total',
        'totál': 'total',
        'iznos': 'ukupno',
        'bar,': 'lubar',
        'lu bar': 'lubar',
        '"lubar"': 'lubar',
        'račun broj': 'datum',
        'račun': 'datum',
        'u račun': 'datum',
        'gg': '',
        'g9': '',
    }

    # --- Store detection ---
    for i, line in enumerate(lines[:5]):
        l = line.lower()
        for wrong, right in ocr_fixes.items():
            l = l.replace(wrong, right)

        if any(x in l for x in ['caffe bar', 'restoran', 'pekara']):
            location_label = line.strip()
            for offset in [1, 2]:
                if i + offset < len(lines):
                    next_line = lines[i + offset].strip()
                    fixed_next = next_line.lower()
                    for wrong, right in ocr_fixes.items():
                        fixed_next = fixed_next.replace(wrong, right)
                    if "lubar" in fixed_next:
                        store_name = "LuBar"
                        break
                    elif len(next_line) > 3:
                        store_name = next_line
            break
        elif len(line.strip()) > 3 and store_name == "Unknown":
            store_name = line.strip()

    if store_name == "Unknown":
        for line in lines[:5]:
            text = line.strip().strip('"\'')
            if len(text) > 2 and text.lower() not in ['caffe bar', 'restoran', 'pekara']:
                if any(char.isdigit() for char in text) or ',' in text or ':' in text:
                    continue
                if re.match(r'^[A-ZČĆŽŠĐa-zčćžšđ ]+$', text):
                    store_name = text
                    break

    for line in lines[:5]:
        if "retro" in line.lower():
            store_name = "Retro"
            break

    # --- Line processing ---
    for line in lines:
        dbg(f"Line: {line}")

        lower_line = line.lower()
        fixed_line = lower_line
        for wrong, right in ocr_fixes.items():
            fixed_line = fixed_line.replace(wrong, right)

        line_fixed = line
        for wrong, right in ocr_fixes.items():
            line_fixed = line_fixed.replace(wrong, right)

        skip_keywords = ['ukupno', 'total', 'datum', 'vrijeme', 'račun', 'bon', 'pdv', 'tax']
        if any(k in fixed_line for k in skip_keywords):
            dbg("→ Skipped (keyword match)")
            continue

        if not date or not time:
            match = re.search(r'datum\\s*[:\\-]?\\s*(\\d{1,2}[.,/-]\\d{1,2}[.,/-]\\d{2,4})[^0-9]*(\\d{1,2}:\\d{2})?', fixed_line)
            if match:
                date_raw = match.group(1).replace(',', '.').replace('/', '.').replace('-', '.')
                time_raw = match.group(2)
                try:
                    date = datetime.strptime(date_raw, "%d.%m.%Y").strftime("%d-%m-%Y")
                except:
                    date = date_raw
                if time_raw:
                    time = time_raw
                dbg(f"→ Found date/time: {date} {time}")
        
        # Try matching a line with two prices (e.g. name 1,00. 3,80)
        price_parts = re.findall(r'(\d+[.,]\d{2})', line)
        if len(price_parts) >= 2:
            name_part = line.split(price_parts[0])[0].strip()
            if len(name_part) > 2:
                try:
                    items.append({
                        "name": name_part,
                        "quantity": 1,
                        "price": float(price_parts[-1].replace(',', '.'))
                    })
                    dbg(f"→ Fallback item: {name_part} = {price_parts[-1]}")
                except:
                    pass
                

        item_match = re.match(r'^(.+?)\\s+(\\d+[xX])?\\s*(\\d+[,.]\\d{2})\\s+(\\d+[,.]\\d{2})$', line)
        if item_match:
            name = item_match.group(1).strip()
            quantity = item_match.group(2)[:-1] if item_match.group(2) else '1'
            price = item_match.group(4).replace(',', '.')
            items.append({
                "name": name,
                "quantity": int(quantity),
                "price": float(price)
            })
            dbg(f"→ Strict item matched: {name} x{quantity} = {price}")
        else:
            loose_match = re.search(r'(.+?)\\s+(\\d+[,.]\\d{2})[\\s\\.]*(\\d+[,.]\\d{2})$', line)
            if loose_match:
                name = loose_match.group(1).strip()
                price = loose_match.group(3).replace(',', '.')
                if len(name) > 2:
                    items.append({
                        "name": name,
                        "quantity": 1,
                        "price": float(price)
                    })
                    dbg(f"→ Loose item matched: {name} = {price}")
            else:
                # Try extracting two prices from any line
                price_parts = re.findall(r'(\\d+[,.]\\d{2})', line)
                if len(price_parts) >= 2:
                    name_part = line.split(price_parts[0])[0].strip()
                    try:
                        items.append({
                            "name": name_part,
                            "quantity": 1,
                            "price": float(price_parts[-1].replace(',', '.'))
                        })
                        dbg(f"→ Fallback item: {name_part} = {price_parts[-1]}")
                    except:
                        pass
                    

    return {
        "store": store_name,
        "location_label": location_label,
        "date": date,
        "time": time,
        "total": total,
        "items": items
    }